// Generated by CoffeeScript 1.6.3
(function() {
  var APP_NAME, DIRECTIVE_MODULE, app;

  APP_NAME = 'roamaor';

  DIRECTIVE_MODULE = "" + APP_NAME + ".directives";

  angular.module(DIRECTIVE_MODULE, []);

  angular.module(DIRECTIVE_MODULE).directive('topNavbar', function($location) {
    var directive;
    return directive = {
      replace: true,
      template: "<div class=\"navbar\">\n    <div class=\"navbar-inner\">\n        <a class=\"brand\" href=\"#\">{{appName}}</a>\n        <ul class=\"nav\">\n            <li ng-repeat=\"link in navLinks\"\n                ng-class=\"{active: currentPath == link.href}\">\n                    <a href=\"{{link.href}}\">{{link.title}}</a>\n            </li>\n        </ul>\n    </div>\n</div>",
      link: function(scope) {
        scope.navLinks = [
          {
            href: '/',
            title: 'Home'
          }
        ];
        return scope.$on("$routeChangeSuccess", function(e, current, previous) {
          return scope.currentPath = $location.path();
        });
      }
    };
  });

  angular.module(DIRECTIVE_MODULE).directive('userFeedback', function() {
    var directive;
    return directive = {
      template: "<div class=\"row-fluid\" ng-show=\"fbModel.html\">\n    <div class=\"span12 alert {{fbModel.alertClass}}\">\n        <span class=\"{{fbModel.iconClass}}\" ng-show=\"fbModel.iconClass\"></span>\n        <span ng-bind-html-unsafe=\"fbModel.html\"></span>\n    </div>\n</div>",
      link: function(scope) {
        var setFeedback;
        scope.fbModel = {};
        setFeedback = function(html, alertClass, iconClass) {
          scope.fbModel.html = html;
          scope.fbModel.alertClass = alertClass;
          return scope.fbModel.iconClass = iconClass;
        };
        scope.$on('feedback', function(html, alertClass, iconClass) {
          return setFeedback(html, alertClass, iconClass);
        });
        scope.$on('successFeedback', function(e, html) {
          return setFeedback(html, 'alert-success', 'icon-thumbs-up');
        });
        scope.$on('errorFeedback', function(e, html) {
          return setFeedback(html, 'alert-error', 'icon-exclamation-sign');
        });
        scope.$on('warnFeedback', function(e, html) {
          return setFeedback(html, '', 'icon-info-sign');
        });
        return scope.$on('clearFeedback', function(e) {
          return setFeedback(null, '', '');
        });
      }
    };
  });

  app = angular.module(APP_NAME, ["" + APP_NAME + ".directives"]).run(function($rootScope) {
    return $rootScope.appName = "Roamoar";
  });

  angular.module(APP_NAME).controller('HomeCtrl', function($scope, $rootScope, $http, $timeout) {
    var fetchData, lineFunc, mapColor, myDest, myDestPath, renderToons, scaleX, scaleY, svg, toonRadius, toonSvgCoords, triFunc;
    mapColor = "#E7E7E7";
    toonRadius = 5;
    scaleX = null;
    scaleY = null;
    svg = d3.select("svg").attr("height", 500).style("background-color", mapColor).style("box-shadow", "1px 1px 1px #999");
    lineFunc = d3.svg.line().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    }).interpolate('linear');
    triFunc = d3.svg.symbol().type("triangle-up");
    myDest = svg.append("circle").attr("id", "my-dest").attr("cx", 0).attr("cy", 0).attr("r", 5).style("fill", mapColor);
    myDestPath = svg.append("path").attr("id", "my-dest-path");
    toonSvgCoords = function(toon) {
      return {
        x: toon.locx + toonRadius,
        y: svg.attr("height") - toon.locy - toonRadius
      };
    };
    svg.append("image").attr("xlink:href", "/static/img/pin.png").attr("width", 20).attr("height", 20);
    $scope.mapClick = function($event) {
      var destPointData, destX, destY, height, lineData, postData, scaledDestX, scaledDestY, svgHeightScale, svgWidthScale, toon, toonCoords, width, yOffset;
      toon = $rootScope.myToon;
      toonCoords = toonSvgCoords(toon);
      destX = $event.offsetX;
      destY = $event.offsetY;
      lineData = [
        {
          x: toonCoords.x,
          y: toonCoords.y
        }, {
          x: destX,
          y: destY
        }
      ];
      yOffset = 10;
      width = 10;
      height = 10;
      destPointData = [
        {
          x: destX,
          y: destY - yOffset
        }, {
          x: destX - width / 2,
          y: destY - yOffset - height
        }, {
          x: destX + width / 2,
          y: destY - yOffset - height
        }, {
          x: destX,
          y: destY - yOffset
        }
      ];
      console.log('destPointData:', destPointData);
      d3.select("#my-dest-point").remove();
      svg.append("path").attr("id", "my-dest-point").attr("d", lineFunc(destPointData)).attr("stroke", "#555").attr("stroke-width", 1).attr("fill", "none").attr("opacity", 0).transition().duration(600).attr("opacity", 1).attr("transform", "translate(0, " + yOffset + ")");
      svgHeightScale = parseInt(svg.style("height")) / $rootScope.worldHeight;
      svgWidthScale = parseInt(svg.style("width")) / $rootScope.worldWidth;
      scaledDestX = destX / svgWidthScale;
      scaledDestY = destY / svgHeightScale;
      postData = {
        x: scaledDestX,
        y: scaledDestY
      };
      return $http.post("/api/destination", postData).then(function(response) {
        return console.log('response:', response);
      });
    };
    renderToons = function() {
      var svgHeight;
      console.log('rendering:', $rootScope.allToons);
      svgHeight = svg.attr("height");
      return _.each($rootScope.allToons, function(toon, idx) {
        var coords, toonLoc;
        coords = toonSvgCoords(toon);
        toonLoc = svg.append("circle").attr("id", "toon-" + toon._id).attr("cx", coords.x).attr("cy", coords.y).attr("r", toonRadius).style("fill", "#E7E7E7");
        return toonLoc.transition().delay(500 + 20 * idx).style("fill", "#777");
      });
    };
    fetchData = function() {
      $http.get("/api/admin/alltoons").then(function(response) {
        $rootScope.allToons = response.data;
        $rootScope.myToon = $rootScope.allToons[0];
        return renderToons();
      });
      return $http.get("/api/bootstrap").then(function(response) {
        $rootScope.worldHeight = response.data.worldHeight;
        return $rootScope.worldWidth = response.data.worldWidth;
      });
    };
    return fetchData();
  });

  angular.module(APP_NAME).config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      var url, urlBase;
      urlBase = '/app';
      url = function(url) {
        return "" + urlBase + "/url";
      };
      $routeProvider.when(urlBase, {
        controller: 'HomeCtrl',
        templateUrl: 'static/partials/home.html'
      });
      return $locationProvider.html5Mode(true).hashPrefix('!');
    }
  ]);

  angular.module(APP_NAME).controller('AdminCtrl', function($scope, $rootScope, $http) {
    $scope.admin = {};
    $scope.submitNewPlayer = function(name) {
      var data;
      console.log('name:', name);
      data = {
        name: name
      };
      return $http.post("/api/admin/newtoon", data).then(function(response) {
        return console.log('response:', response);
      });
    };
    return $scope.selectedToonChange = function(toon) {
      return console.log('toon:', toon);
    };
  });

}).call(this);
